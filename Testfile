type MappingConfig = {
  upfFieldId: number;
  [key: string]: any;
};

type CleansingInstruction = {
  CleansingData: string;
  upfFieldId: number;
  upfFieldName: string;
};

type CleansingRule = {
  CleansingRuleName: string;
  CleansingInstructions: CleansingInstruction[];
};

const transformCleansingData = (
  fieldCleansingRules: CleansingRule[],
  mappingConfig: MappingConfig[]
) => {
  const result: Record<number, any> = {};

  fieldCleansingRules.forEach(rule => {
    if (rule.CleansingInstructions.length === 0) return;

    rule.CleansingInstructions.forEach(instr => {
      const parsedData = JSON.parse(instr.CleansingData);
      const existing = result[instr.upfFieldId];

      if (!existing) {
        const matchedMapping = mappingConfig.find(
          m => m.upfFieldId === instr.upfFieldId
        );

        result[instr.upfFieldId] = {
          upfFieldId: instr.upfFieldId,
          upfFieldName: instr.upfFieldName,
          CleansingRuleName: rule.CleansingRuleName,
          cleansingData: [parsedData],
          ...(matchedMapping || {})
        };
      } else {
        existing.cleansingData.push(parsedData);
      }
    });
  });

  return Object.values(result);
};

const transformedData = transformCleansingData(fieldCleansingRules, mappingConfig);
console.log(transformedData);

-----
type TransformedItem = {
  upfFieldId: number;
  upfFieldName: string;
  CleansingRuleName: string;
  cleansingData: Array<Record<string, any>>;
  [key: string]: any;
};

const reverseTransform = (transformed: TransformedItem[]) => {
  const ruleMap: Record<string, CleansingInstruction[]> = {};

  transformed.forEach(item => {
    const ruleName = item.CleansingRuleName;

    if (!ruleMap[ruleName]) {
      ruleMap[ruleName] = [];
    }

    const instructions = item.cleansingData.map(cd => ({
      CleansingData: JSON.stringify(cd),
      upfFieldId: item.upfFieldId,
      upfFieldName: item.upfFieldName
    }));

    ruleMap[ruleName].push(...instructions);
  });

  const reversed = Object.entries(ruleMap).map(([ruleName, instructions]) => ({
    CleansingRuleName: ruleName,
    CleansingInstructions: instructions
  }));

  return reversed;
};

// Example usage
const reversedRules = reverseTransform(transformedData);
console.log(reversedRules);
