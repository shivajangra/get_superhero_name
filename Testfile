import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import QueryBuilder, { FilterField } from './QueryBuilder';

describe('QueryBuilder Component', () => {
  const mockFields: FilterField[] = [
    { value: 'name', label: 'Name' },
    { value: 'age', label: 'Age' },
  ];

  const onQueryChangeMock = jest.fn();

  beforeEach(() => {
    onQueryChangeMock.mockClear();
  });

  it('renders without crashing', () => {
    render(<QueryBuilder filterFields={mockFields} onQueryChange={onQueryChangeMock} />);
    expect(screen.getByRole('button', { name: /add filter/i })).toBeInTheDocument();
  });

  it('adds a filter row when "Add Filter" is clicked', () => {
    render(<QueryBuilder filterFields={mockFields} onQueryChange={onQueryChangeMock} />);
    fireEvent.click(screen.getByRole('button', { name: /add filter/i }));
    
    expect(screen.getByText('Field')).toBeInTheDocument();
    expect(screen.getByText('Operator')).toBeInTheDocument();
    expect(screen.getByText('Value')).toBeInTheDocument();
    expect(onQueryChangeMock).not.toHaveBeenCalled(); // Not called until value changes
  });

  it('updates field, operator, and value correctly', () => {
    render(<QueryBuilder filterFields={mockFields} onQueryChange={onQueryChangeMock} />);
    fireEvent.click(screen.getByRole('button', { name: /add filter/i }));

    const fieldSelect = screen.getAllByRole('button')[1]; // First dropdown (field)
    fireEvent.mouseDown(fieldSelect);
    fireEvent.click(screen.getByText('Age'));

    const operatorSelect = screen.getAllByRole('button')[2]; // Second dropdown (operator)
    fireEvent.mouseDown(operatorSelect);
    fireEvent.click(screen.getByText('Not Equals'));

    const valueInput = screen.getByRole('textbox');
    fireEvent.change(valueInput, { target: { value: '30' } });

    expect(onQueryChangeMock).toHaveBeenCalledTimes(3);
    expect(onQueryChangeMock).toHaveBeenLastCalledWith([
      { id: 0, field: 'age', operator: '<>', value: '30' },
    ]);
  });

  it('removes a filter', () => {
    render(<QueryBuilder filterFields={mockFields} onQueryChange={onQueryChangeMock} />);
    fireEvent.click(screen.getByRole('button', { name: /add filter/i }));

    const deleteButton = screen.getByRole('button', { name: /delete/i });
    fireEvent.click(deleteButton);

    // Since only one filter was added, it should not be removed (safety check in removeFilter)
    expect(screen.getByText('Field')).toBeInTheDocument(); 
  });

  it('adds multiple filters and removes one', () => {
    render(<QueryBuilder filterFields={mockFields} onQueryChange={onQueryChangeMock} />);
    fireEvent.click(screen.getByRole('button', { name: /add filter/i }));
    fireEvent.click(screen.getByRole('button', { name: /add filter/i }));

    const deleteButtons = screen.getAllByRole('button', { name: /delete/i });
    fireEvent.click(deleteButtons[0]);

    // Expect only one row left
    const rows = screen.getAllByRole('row');
    // 1 header + 1 row left
    expect(rows.length).toBe(2);
  });
});
