describe('TransactionDataSetup - Save functionality', () => {
  beforeEach(() => {
    jest.useFakeTimers();

    // Mocks for hooks and context
    (useTransactionContext as jest.Mock).mockReturnValue({
      currentTransaction: {
        transactionId: 'txn-123',
        loanHeader: { loanHeaderId: 'loan-456' }
      },
      setCurrentTransaction: jest.fn()
    });

    (useFileData as jest.Mock).mockReturnValue({
      fileDataList: [
        {
          file: new File(['test'], 'test.csv', { type: 'text/csv' }),
          fileName: 'test.csv',
          fileType: 'text/csv',
          isPoolFile: false,
          joinKey: 'method',
          fileUid: 'uid-1',
          isNew: true
        }
      ],
      setFileDataList: jest.fn(),
      setCurrentFile: jest.fn()
    });

    (usePageParams as jest.Mock).mockReturnValue({ transactionId: 'txn-123' });

    (useUploadFile as jest.Mock).mockReturnValue({
      uploadFile: jest.fn().mockResolvedValue({ success: true })
    });

    (useSaveTransaction as jest.Mock).mockReturnValue({
      saveTransaction: jest.fn().mockResolvedValue({
        transactionId: 'txn-123',
        loanHeader: { loanHeaderId: 'loan-456' }
      })
    });

    (useTriggerGlueJob as jest.Mock).mockReturnValue({
      triggerGlueJob: jest.fn().mockResolvedValue({
        jobRunId: 'job-789'
      })
    });

    (useTransactionDetail as jest.Mock).mockReturnValue({
      fetchTransactionDetail: jest.fn(),
      transactionDetail: null
    });

    (useGetGlueJobStatusDetails as jest.Mock).mockReturnValue({
      fetchGlueJobStatusDetail: jest.fn().mockResolvedValue({
        data: {
          getGlueJobStatusDetails: {
            jobStatus: 'SUCCEEDED'
          }
        }
      })
    });
  });

  it('should invoke handleSave and cover glueJobStatusPolling and checkForNextCall', async () => {
    render(<TransactionDataSetup />);

    // Click the save button
    const saveButton = screen.getByText(/save/i);
    fireEvent.click(saveButton);

    await waitFor(() => {
      expect(useUploadFile().uploadFile).toHaveBeenCalled();
      expect(useSaveTransaction().saveTransaction).toHaveBeenCalled();
      expect(useTriggerGlueJob().triggerGlueJob).toHaveBeenCalled();
    });

    // Fast-forward polling interval
    jest.runOnlyPendingTimers();

    await waitFor(() => {
      expect(useGetGlueJobStatusDetails().fetchGlueJobStatusDetail).toHaveBeenCalled();
    });
  });
});
