import { render, screen, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import ManageLookup from './ManageLookup';

// ---- mock dependencies ----
const mockSaveLookupsData = jest.fn();
const mockUpdateLookup = jest.fn();
const mockOnClose = jest.fn();

jest.mock('../../hooks/useSaveLookupsData', () => ({
  __esModule: true,
  default: () => mockSaveLookupsData,
}));

// Common setup for tests
const setup = () => {
  render(
    <ManageLookup
      updateLookup={mockUpdateLookup}
      onClose={mockOnClose}
      lookupsQuery={[]}
      newLookups={[]}
      setPageErrorMessage={jest.fn()}
    />
  );
};

describe('ManageLookup - Data Cleansing', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('✅ Should save lookups successfully', async () => {
    mockSaveLookupsData.mockResolvedValueOnce({ lookupOptions: ['test'] });

    setup();

    // Add a new lookup value
    const button = screen.getByTestId('add-lookup-value');
    await userEvent.click(button);

    const input = screen.getByTestId('lookupValue-0').querySelector('input')!;
    await userEvent.type(input, 'Test New');

    // Apply changes
    const applyButton = screen.getByTestId('apply-changes');
    await userEvent.click(applyButton);

    // Assert async call was made
    await waitFor(() => {
      expect(mockSaveLookupsData).toHaveBeenCalledTimes(1);
      expect(mockUpdateLookup).toHaveBeenCalled();
      expect(mockOnClose).toHaveBeenCalled();
    });
  });

  test('❌ Should show error when save fails', async () => {
    mockSaveLookupsData.mockRejectedValueOnce(new Error('fail'));

    const mockSetPageErrorMessage = jest.fn();
    render(
      <ManageLookup
        updateLookup={mockUpdateLookup}
        onClose={mockOnClose}
        lookupsQuery={[]}
        newLookups={[]}
        setPageErrorMessage={mockSetPageErrorMessage}
      />
    );

    // Add a new lookup value
    const button = screen.getByTestId('add-lookup-value');
    await userEvent.click(button);

    const input = screen.getByTestId('lookupValue-0').querySelector('input')!;
    await userEvent.type(input, 'Fail Test');

    // Apply changes
    const applyButton = screen.getByTestId('apply-changes');
    await userEvent.click(applyButton);

    // Assert error handling
    await waitFor(() => {
      expect(mockSaveLookupsData).toHaveBeenCalledTimes(1);
      expect(mockSetPageErrorMessage).toHaveBeenCalledWith('Something Went Wrong!');
    });
  });
});
