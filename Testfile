nevigationdata ts
// src/data/menuData.ts
export interface SubMenu {
  id: string;
  label: string;
  path: string;
  status: 'in-progress' | 'completed' | 'pending';
}

export interface Menu {
  id: string;
  label: string;
  path: string;
  subMenus?: SubMenu[];
}

export const menuData: Menu[] = [
  {
    id: "transaction",
    label: "Transaction",
    path: "/transaction/1/details",
    subMenus: [
      { id: "details", label: "Details", path: "/transaction/1/details", status: "completed" },
      { id: "review", label: "Review", path: "/transaction/1/review", status: "in-progress" },
      { id: "confirm", label: "Confirm", path: "/transaction/1/confirm", status: "pending" },
    ],
  },
  {
    id: "reports",
    label: "Reports",
    path: "/reports",
  },
];


sidebar
// src/components/Sidebar.tsx
import React from "react";
import { useLocation, useNavigate } from "react-router-dom";
import { SidebarContainer, StyledList, StyledListItem, StyledSubMenuItem } from "./SidebarStyles";
import { menuData } from "../data/menuData";

const Sidebar: React.FC = () => {
  const location = useLocation();
  const navigate = useNavigate();

  const handleNavigation = (path: string, status?: string) => {
    if (status !== "pending") navigate(path);
  };

  return (
    <SidebarContainer>
      <StyledList>
        {menuData.map((menu) => {
          const isSelected = location.pathname.startsWith(menu.path);
          return (
            <div key={menu.id}>
              <StyledListItem selected={isSelected} onClick={() => !menu.subMenus && navigate(menu.path)}>
                <span>{menu.label}</span>
              </StyledListItem>
              {menu.subMenus &&
                menu.subMenus.map((sub) => (
                  <StyledSubMenuItem
                    key={sub.id}
                    status={sub.status}
                    onClick={() => handleNavigation(sub.path, sub.status)}
                  >
                    <span>{sub.label}</span>
                  </StyledSubMenuItem>
                ))}
            </div>
          );
        })}
      </StyledList>
    </SidebarContainer>
  );
};

export default Sidebar;

style
// src/components/SidebarStyles.ts
import styled from "styled-components";
import { List, ListItem, ListItemText } from "@mui/material";

export const SidebarContainer = styled.div`
  width: 250px;
  height: 100vh;
  background: #f5f5f5;
  padding: 10px;
  border-right: 2px solid #ddd;
`;

export const StyledList = styled(List)`
  padding: 0;
`;

export const StyledListItem = styled(ListItem)<{ selected: boolean }>`
  border-left: ${(props) => (props.selected ? "4px solid #1976d2" : "none")};
  background: ${(props) =>
    props.selected ? "#e3f2fd" : "transparent"} !important;
  cursor: pointer;
  transition: 0.3s;
`;

export const StyledSubMenuItem = styled(ListItem)<{ status: string }>`
  background: ${(props) =>
    props.status === "in-progress"
      ? "#bbdefb"
      : props.status === "completed"
      ? "#c8e6c9"
      : "transparent"} !important;
  cursor: ${(props) => (props.status === "pending" ? "not-allowed" : "pointer")};
  opacity: ${(props) => (props.status === "pending" ? "0.5" : "1")};
  transition: 0.3s;
`;


import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { List, ListItemText, Collapse } from '@mui/material';
import ExpandLess from '@mui/icons-material/ExpandLess';
import ExpandMore from '@mui/icons-material/ExpandMore';
import { SidebarContainer, StyledListItem, SubMenu } from './SidebarStyles';
import { navigationSteps, Step } from './navigationData';

const Sidebar: React.FC = () => {
  const [openStep, setOpenStep] = useState<string | null>(null);
  const [selectedStep, setSelectedStep] = useState<string | null>(null);
  const navigate = useNavigate();

  const handleStepClick = (step: Step) => {
    setSelectedStep(step.label);
    navigate(step.path);
    if (step.subSteps) {
      setOpenStep(openStep === step.label ? null : step.label);
    }
  };

  return (
    <SidebarContainer>
      <List>
        {navigationSteps.map((step) => (
          <React.Fragment key={step.label}>
            <StyledListItem active={selectedStep === step.label} onClick={() => handleStepClick(step)}>
              <ListItemText primary={step.label} />
              {step.subSteps && (openStep === step.label ? <ExpandLess /> : <ExpandMore />)}
            </StyledListItem>
            {step.subSteps && (
              <Collapse in={openStep === step.label} timeout="auto" unmountOnExit>
                <List disablePadding>
                  {step.subSteps.map((subStep) => (
                    <StyledListItem
                      key={subStep.label}
                      active={selectedStep === subStep.label}
                      onClick={() => {
                        setSelectedStep(subStep.label);
                        navigate(subStep.path);
                      }}
                    >
                      <SubMenu>{subStep.label}</SubMenu>
                    </StyledListItem>
                  ))}
                </List>
              </Collapse>
            )}
          </React.Fragment>
        ))}
      </List>
    </SidebarContainer>
  );
};

export default Sidebar;


