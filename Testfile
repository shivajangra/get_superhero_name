it('should trigger handleSave, glueJobStatusPolling and checkForNextCall on successful upload and glue job completion', async () => {
  // Step 1: Mock the file upload as successful
  mockUploadFile.mockResolvedValue({ status: 'ok' });

  // Step 2: Mock the GraphQL hook that returns job status
  const mockFetchGlueJobStatusDetail = jest.fn().mockResolvedValue({
    data: {
      getGlueJobStatusDetails: {
        jobStatus: 'SUCCEEDED', // trigger the glueJobStatusPolling + checkForNextCall
      },
    },
  });

  // Step 3: Mock the actual hook useGetGlueJobStatusDetails
  jest.mock('utils/hooks/useGetGlueJobStatus', () => ({
    __esModule: true,
    useGetGlueJobStatusDetails: () => ({
      fetchGlueJobStatusDetail: mockFetchGlueJobStatusDetail,
    }),
  }));

  // Step 4: Setup and render component
  setup(mockTransactionDetail, [mockNewFile]);

  // Step 5: Trigger handleSave via button click
  const button = screen.getByText('Proceed to Data Mapping');
  expect(button).toBeInTheDocument();
  fireEvent.click(button);

  // Step 6: Wait for all async actions to complete
  await waitFor(() => {
    // Check if uploadFile is triggered (handleSave)
    expect(mockUploadFile).toHaveBeenCalled();

    // Check if Glue job polling is triggered
    expect(mockFetchGlueJobStatusDetail).toHaveBeenCalled();

    // You can optionally spy on glueJobStatusPolling and checkForNextCall
    // If they're internal to your component, consider exposing them or observing side-effects
  });
});
